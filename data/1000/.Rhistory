#print(compare(sort(C1[1:length(C1)]), sort(GT), method='nmi'))
#C2 <- kmeans(normalize(as.matrix(A)), centers=5)
#C2 <- kmeans(as.matrix(A), centers=4)
#plot(create.communities(C2$cluster), G)
#print(compare(sort(C2$cluster), sort(GT), method='nmi'))
simulate <- function() {
Sim <- NULL
i <- 1
while(i <= 100) {
S <- build.graph2(5, 10, 30)
#S <- build.graph2(8, 12, 40)
G <- S[[1]]
GT <- S[[2]]
A <- get.adjacency(G)
#Di <- solve(diag(degree(G)))
#An <- Di %*% A
tryCatch({
C1 <- specc(as.matrix(A), centers=5, iterations=1000)
C2 <- kmeans(as.matrix(A), centers=5, iter.max=1000)
CMP1 <- compare(sort(C1[1:length(C1)]), sort(GT), method='nmi')
CMP2 <- compare(sort(C2$cluster), sort(GT), method='nmi')
Sim <- rbind(Sim, c(CMP1, CMP2))
i <- i + 1
}, error=function(e) e)
}
Sim
}
Sim <- simulate()
print(apply(Sim, 2, mean))
Sim <- simulate()
print(apply(Sim, 2, mean))
simulate <- function() {
Sim <- NULL
i <- 1
while(i <= 100) {
S <- build.graph2(5, 10, 30)
#S <- build.graph2(8, 12, 40)
G <- S[[1]]
GT <- S[[2]]
A <- get.adjacency(G)
Di <- solve(diag(degree(G)))
An <- Di %*% A
tryCatch({
C1 <- specc(as.matrix(An), centers=5, iterations=1000)
C2 <- kmeans(as.matrix(A), centers=5, iter.max=1000)
CMP1 <- compare(sort(C1[1:length(C1)]), sort(GT), method='nmi')
CMP2 <- compare(sort(C2$cluster), sort(GT), method='nmi')
Sim <- rbind(Sim, c(CMP1, CMP2))
i <- i + 1
}, error=function(e) e)
}
Sim
}
Sim <- simulate()
print(apply(Sim, 2, mean))
Sim <- simulate()
print(apply(Sim, 2, mean))
Sim <- simulate()
print(apply(Sim, 2, mean))
Sim <- simulate()
print(apply(Sim, 2, mean))
Sim <- simulate()
print(apply(Sim, 2, mean))
simulate <- function() {
Sim <- NULL
i <- 1
while(i <= 100) {
S <- build.graph2(5, 10, 30)
#S <- build.graph2(8, 12, 40)
G <- S[[1]]
GT <- S[[2]]
A <- get.adjacency(G)
#Di <- solve(diag(degree(G)))
#An <- Di %*% A
tryCatch({
C1 <- specc(as.matrix(A), centers=5, iterations=1000)
C2 <- kmeans(as.matrix(A), centers=5, iter.max=1000)
CMP1 <- compare(sort(C1[1:length(C1)]), sort(GT), method='nmi')
CMP2 <- compare(sort(C2$cluster), sort(GT), method='nmi')
Sim <- rbind(Sim, c(CMP1, CMP2))
i <- i + 1
}, error=function(e) e)
}
Sim
}
Sim <- simulate()
print(apply(Sim, 2, mean))
normalize <- function(data) {
max <- apply(data, 2, max)
min <- apply(data, 2, min)
t(apply(t(data), 2, function(x) (x - min) / (max - min)))
}
build.graph2 <- function(nc, sc, oc) {
EL <- NULL
OC <- NULL
GT <- NULL
oc <- as.integer((oc/100) * sc)
if(oc == 0) oc <- 1
for(i in 1:nc) {
sV <- (i*sc) + 1
eV <- (i+1) * sc
GT[sV:eV] <- i
names(GT)[sV:eV] <- as.character(sV:eV)
eL <- matrix(sample(sV:eV, length(sV:eV)), ncol=2)
OC <- c(OC, sample(sV:eV, oc))
EL <- rbind(EL, eL)
eL <- combinations(length(sV:eV), 2, sV:eV)
EL <- rbind(EL, eL)
}
EL <- rbind(EL, combinations(length(OC), 2, OC))
EL <- rbind(EL, matrix(sample(OC, length(OC)), ncol=2))
GT <- GT[!is.na(GT)]
list(graph.data.frame(as.data.frame(EL), directed=F), GT)
}
#L <- build.graph2(4, 8, 40)
#G <- L[[1]]
#GT <- L[[2]]
#C <- fastgreedy.community(G)
#l <- layout.kamada.kawai(G)
#plot(C, G, layout=l)
#plot(G, layout=l)
#A <- get.adjacency(G)
#C1 <- specc(normalize(as.matrix(A)), centers=4)
#C1 <- specc(as.matrix(A1), centers=4)
#plot(create.communities(C1), G)
#print(compare(sort(C1[1:length(C1)]), sort(GT), method='nmi'))
#C2 <- kmeans(normalize(as.matrix(A)), centers=5)
#C2 <- kmeans(as.matrix(A), centers=4)
#plot(create.communities(C2$cluster), G)
#print(compare(sort(C2$cluster), sort(GT), method='nmi'))
simulate <- function() {
Sim <- NULL
i <- 1
while(i <= 100) {
S <- build.graph2(5, 10, 30)
#S <- build.graph2(8, 12, 40)
G <- S[[1]]
GT <- S[[2]]
A <- get.adjacency(G)
#Di <- solve(diag(degree(G)))
#An <- Di %*% A
tryCatch({
C1 <- specc(as.matrix(A), centers=5, iterations=1000)
C2 <- kmeans(as.matrix(A), centers=5, iter.max=1000)
CMP1 <- compare(sort(C1[1:length(C1)]), sort(GT), method='nmi')
CMP2 <- compare(sort(C2$cluster), sort(GT), method='nmi')
Sim <- rbind(Sim, c(CMP1, CMP2))
i <- i + 1
}, error=function(e) e)
}
Sim
}
Sim <- simulate()
print(apply(Sim, 2, mean))
Sim <- simulate()
print(apply(Sim, 2, mean))
Sim <- simulate()
print(apply(Sim, 2, mean))
Sim <- simulate()
print(apply(Sim, 2, mean))
Sim <- simulate()
print(apply(Sim, 2, mean))
Sim <- simulate()
print(apply(Sim, 2, mean))
Sim <- simulate()
print(apply(Sim, 2, mean))
simulate <- function() {
Sim <- NULL
i <- 1
while(i <= 1000) {
S <- build.graph2(5, 10, 30)
#S <- build.graph2(8, 12, 40)
G <- S[[1]]
GT <- S[[2]]
A <- get.adjacency(G)
#Di <- solve(diag(degree(G)))
#An <- Di %*% A
tryCatch({
C1 <- specc(as.matrix(A), centers=5, iterations=1000)
C2 <- kmeans(as.matrix(A), centers=5, iter.max=1000)
CMP1 <- compare(sort(C1[1:length(C1)]), sort(GT), method='nmi')
CMP2 <- compare(sort(C2$cluster), sort(GT), method='nmi')
Sim <- rbind(Sim, c(CMP1, CMP2))
i <- i + 1
}, error=function(e) e)
}
Sim
}
Sim <- simulate()
print(apply(Sim, 2, mean))
simulate <- function() {
Sim <- NULL
i <- 1
while(i <= 1000) {
S <- build.graph2(5, 10, 30)
#S <- build.graph2(8, 12, 40)
G <- S[[1]]
GT <- S[[2]]
A <- get.adjacency(G)
Di <- solve(diag(degree(G)))
An <- Di %*% A
tryCatch({
C1 <- specc(as.matrix(An), centers=5, iterations=1000)
C2 <- kmeans(as.matrix(A), centers=5, iter.max=1000)
CMP1 <- compare(sort(C1[1:length(C1)]), sort(GT), method='nmi')
CMP2 <- compare(sort(C2$cluster), sort(GT), method='nmi')
Sim <- rbind(Sim, c(CMP1, CMP2))
i <- i + 1
}, error=function(e) e)
}
Sim
}
Sim <- simulate()
print(apply(Sim, 2, mean))
simulate <- function() {
Sim <- NULL
i <- 1
while(i <= 1000) {
#S <- build.graph2(5, 10, 30)
S <- build.graph2(4, 8, 40)
G <- S[[1]]
GT <- S[[2]]
A <- get.adjacency(G)
#Di <- solve(diag(degree(G)))
#An <- Di %*% A
tryCatch({
C1 <- specc(as.matrix(A), centers=4, iterations=1000)
C2 <- kmeans(as.matrix(A), centers=4, iter.max=1000)
CMP1 <- compare(sort(C1[1:length(C1)]), sort(GT), method='nmi')
CMP2 <- compare(sort(C2$cluster), sort(GT), method='nmi')
Sim <- rbind(Sim, c(CMP1, CMP2))
i <- i + 1
}, error=function(e) e)
}
Sim
}
Sim <- simulate()
print(apply(Sim, 2, mean))
del(sim)
rm(sim)
rm(Sim)
simulate <- function() {
Sim <- NULL
i <- 1
while(i <= 1000) {
S <- build.graph2(6, 12, 40)
#S <- build.graph2(4, 8, 40)
G <- S[[1]]
GT <- S[[2]]
A <- get.adjacency(G)
#Di <- solve(diag(degree(G)))
#An <- Di %*% A
tryCatch({
C1 <- specc(as.matrix(A), centers=6, iterations=1000)
C2 <- kmeans(as.matrix(A), centers=6, iter.max=1000)
CMP1 <- compare(sort(C1[1:length(C1)]), sort(GT), method='nmi')
CMP2 <- compare(sort(C2$cluster), sort(GT), method='nmi')
Sim <- rbind(Sim, c(CMP1, CMP2))
i <- i + 1
}, error=function(e) e)
}
Sim
}
Sim <- simulate()
print(apply(Sim, 2, mean))
simulate <- function() {
Sim <- NULL
i <- 1
while(i <= 1000) {
S <- build.graph2(4, 12, 40)
#S <- build.graph2(4, 8, 40)
G <- S[[1]]
GT <- S[[2]]
A <- get.adjacency(G)
#Di <- solve(diag(degree(G)))
#An <- Di %*% A
tryCatch({
C1 <- specc(as.matrix(A), centers=6, iterations=1000)
C2 <- kmeans(as.matrix(A), centers=6, iter.max=1000)
CMP1 <- compare(sort(C1[1:length(C1)]), sort(GT), method='nmi')
CMP2 <- compare(sort(C2$cluster), sort(GT), method='nmi')
Sim <- rbind(Sim, c(CMP1, CMP2))
i <- i + 1
}, error=function(e) e)
}
Sim
}
Sim <- simulate()
print(apply(Sim, 2, mean))
simulate <- function() {
Sim <- NULL
i <- 1
while(i <= 1000) {
S <- build.graph2(4, 12, 40)
#S <- build.graph2(4, 8, 40)
G <- S[[1]]
GT <- S[[2]]
A <- get.adjacency(G)
#Di <- solve(diag(degree(G)))
#An <- Di %*% A
tryCatch({
C1 <- specc(as.matrix(A), centers=4, iterations=1000)
C2 <- kmeans(as.matrix(A), centers=4, iter.max=1000)
CMP1 <- compare(sort(C1[1:length(C1)]), sort(GT), method='nmi')
CMP2 <- compare(sort(C2$cluster), sort(GT), method='nmi')
Sim <- rbind(Sim, c(CMP1, CMP2))
i <- i + 1
}, error=function(e) e)
}
Sim
}
Sim <- simulate()
print(apply(Sim, 2, mean))
rm(Sim)
simulate <- function() {
Sim <- NULL
i <- 1
while(i <= 1000) {
S <- build.graph2(5, 12, 40)
#S <- build.graph2(4, 8, 40)
G <- S[[1]]
GT <- S[[2]]
A <- get.adjacency(G)
#Di <- solve(diag(degree(G)))
#An <- Di %*% A
tryCatch({
C1 <- specc(as.matrix(A), centers=5, iterations=1000)
C2 <- kmeans(as.matrix(A), centers=5, iter.max=1000)
CMP1 <- compare(sort(C1[1:length(C1)]), sort(GT), method='nmi')
CMP2 <- compare(sort(C2$cluster), sort(GT), method='nmi')
Sim <- rbind(Sim, c(CMP1, CMP2))
i <- i + 1
}, error=function(e) e)
}
Sim
}
Sim <- simulate()
print(apply(Sim, 2, mean))
simulate <- function() {
Sim <- NULL
i <- 1
while(i <= 1000) {
#S <- build.graph2(5, 12, 40)
S <- build.graph2(4, 8, 40)
G <- S[[1]]
GT <- S[[2]]
A <- get.adjacency(G)
#Di <- solve(diag(degree(G)))
#An <- Di %*% A
tryCatch({
C1 <- specc(as.matrix(A), centers=4, iterations=1000)
C2 <- kmeans(as.matrix(A), centers=4, iter.max=1000)
CMP1 <- compare(sort(C1[1:length(C1)]), sort(GT), method='nmi')
CMP2 <- compare(sort(C2$cluster), sort(GT), method='nmi')
Sim <- rbind(Sim, c(CMP1, CMP2))
i <- i + 1
}, error=function(e) e)
}
Sim
}
Sim <- simulate()
print(apply(Sim, 2, mean))
simulate <- function() {
Sim <- NULL
i <- 1
while(i <= 1000) {
#S <- build.graph2(5, 12, 40)
S <- build.graph2(4, 8, 30)
G <- S[[1]]
GT <- S[[2]]
A <- get.adjacency(G)
#Di <- solve(diag(degree(G)))
#An <- Di %*% A
tryCatch({
C1 <- specc(as.matrix(A), centers=4, iterations=1000)
C2 <- kmeans(as.matrix(A), centers=4, iter.max=1000)
CMP1 <- compare(sort(C1[1:length(C1)]), sort(GT), method='nmi')
CMP2 <- compare(sort(C2$cluster), sort(GT), method='nmi')
Sim <- rbind(Sim, c(CMP1, CMP2))
i <- i + 1
}, error=function(e) e)
}
Sim
}
Sim <- simulate()
print(apply(Sim, 2, mean))
simulate <- function() {
Sim <- NULL
i <- 1
while(i <= 1000) {
#S <- build.graph2(5, 12, 40)
S <- build.graph2(4, 8, 50)
G <- S[[1]]
GT <- S[[2]]
A <- get.adjacency(G)
#Di <- solve(diag(degree(G)))
#An <- Di %*% A
tryCatch({
C1 <- specc(as.matrix(A), centers=4, iterations=1000)
C2 <- kmeans(as.matrix(A), centers=4, iter.max=1000)
CMP1 <- compare(sort(C1[1:length(C1)]), sort(GT), method='nmi')
CMP2 <- compare(sort(C2$cluster), sort(GT), method='nmi')
Sim <- rbind(Sim, c(CMP1, CMP2))
i <- i + 1
}, error=function(e) e)
}
Sim
}
Sim <- simulate()
print(apply(Sim, 2, mean))
library igraph
library(igraph)
cdr <- read.table('C:/Users/AV186019/Documents/Customers/Telefonica/Arquivos\ Input\ Detraf/DETRAF_0201.csv')
library(igraph)
cdr <- read.csv('C:/Users/AV186019/Documents/Customers/Telefonica/Arquivos\ Input\ Detraf/DETRAF_0201.csv', header=T, sep=';')
View(cdr)
View(cdr)
G <- graph.data.frame(data.frame(cdr$NUM_A, cdr$NUM_B), directed=T)
plot(G)
gc()
idx <- sample(1:dim(cdr)[1], trunc(dim(cdr)[1]*50/100))
idx <- sample(1:dim(cdr)[1], trunc(dim(cdr)[1]*5/100))
G <- graph.data.frame(data.frame(cdr$NUM_A[idx], cdr$NUM_B[idx]), directed=T)
plot(G)
igraph.options(vertex.size=3, edge.arrow.size=0.5, layout=layout.fruchterman.reingold)
plot(G)
igraph.options(vertex.size=3, edge.arrow.size=0.1, layout=layout.fruchterman.reingold)
plot(G)
igraph.options(vertex.size=10, edge.arrow.size=0.5, vertex.label=NULL, layout=layout.fruchterman.reingold)
plot(G)
igraph.options(vertex.size=10, edge.arrow.size=0.01, vertex.label=NULL, layout=layout.fruchterman.reingold)
plot(G)
igraph.options(vertex.size=2, edge.arrow.size=0.01, vertex.label='')
l <- layout.fruchterman.reingold
plot(G, layout=l)
idx <- sample(1:dim(cdr)[1], trunc(dim(cdr)[1]*10/100))
source('~/Customers/Telefonica/cdr_test.R')
G2 <- graph.data.frame(data.frame(cdr$ROTA_ENT[idx], cdr$ROTA_SAI[idx]), directed=T)
plot(G2, layout=l)
install.packages('foreach')
install.packages('foreach')
install.packages('biganalytics')
library(igraph)
data(karate)
X=matrix(c(1/3,1/3,1/3,0,0), c(0,0,1/3,1/3,1/3), c(1/3,0,0,1/3,1/3), c(1,0,0,0,0), c(0,1,0,0,0), nrows=5)
X=matrix(c(1/3,1/3,1/3,0,0), c(0,0,1/3,1/3,1/3), c(1/3,0,0,1/3,1/3), c(1,0,0,0,0), c(0,1,0,0,0), nrow=5)
X=matrix(c(1/3,1/3,1/3,0,0,0,0,1/3,1/3,1/3,1/3,0,0,1/3,1/3,1,0,0,0,0,0,1,0,0,0), nrow=5)
X
X=matrix(c(1/3,1/3,1/3,0,0,0,0,1/3,1/3,1/3,1/3,0,0,1/3,1/3,1,0,0,0,0,0,1,0,0,0), nrow=5, byrow=T)
X
solve(x)
solve(X)
X=matrix(c(1/3,1/3,1/3,0,0,0,1/3,1/3,1/3,0,0,1/3,1,0,0,0,0,1,0,0), nrow=4, byrow=T)
X
X=matrix(c(1/3,1/3,1/3,0,0,0,1/3,1/3,1/3,0,0,1/3,1,0,0,0), nrow=4, byrow=T)
X
solve(X)
Y=solve(X)
Y
Z=matrix(c(0,1,0,0), ncol=1)
Z
Y%*%Z
y*Z
Y*Z
Y%o%Z
Z=matrix(c(0,1,0,0), nrow=1)
Z
y%*%Z
Y%*%Z
t(Y)%*%Z
Z=matrix(c(0,1,0,0), ncol=1)
t(Y)%*%Z
Y
X
t(X)
solve(t(X))
Y
solve(t(X))%*%Z
S=solve(t(X))%*%Z
S
S*(1,0,0,0)
S*c(1,0,0,0)
S%*%c(1,0,0,0)
S%*%c(1,2,0,0)
S*c(1,2,0,0)
S%o%c(1,2,0,0)
S*c(1,2,0,0)
S=solve(t(X))%*%Z
S
Z=matrix(c(0.1,0.2,0.3,0.2), ncol=1)
S=solve(t(X))%*%Z
S
Z=matrix(c(0,0,0,1), ncol=1)
S=solve(t(X))%*%Z
S
library(kernlab)
library(igraph)
library(KRLS)
setwd('C:/Users/AV186019/Documents/Courses/CS224W/project/R/data/benchmark/1000')
benchmark <- read.table('network.dat')
G <- graph.data.frame(benchmark, directed=F)
A <- get.adjacency(G)
A <- A/2
G <- graph.adjacency(A, mode='undirected')
d <- degree(G,mode='all')
D <- diag(1/d)
S <- similarity.jaccard(G)
d <- degree(G,mode='all')
D <- diag(1/d)
X <- D %*% S
write.table(X, file='data.txt')
write.table(X, file='C:/Users/AV186019/Documents/Courses/CS224W/project/R/data/data.txt', row.names=F, col.names=F)
